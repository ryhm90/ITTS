







// src/app/division/dashboard/page.tsx
'use client';
import { FormControlLabel } from '@mui/material';
import { TabContext, TabList, TabPanel } from '@mui/lab';
import React, { useEffect, useState, FormEvent } from 'react';
import Link from 'next/link';
import {
  Box,
  Table,
  Tab,
  TableHead,
  TableRow,
  TableBody,
  TableCell,
  IconButton,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  TextField,
  Select,
  MenuItem,
  InputLabel,
  FormControl,
  Typography,
  Snackbar,
  Paper,
  Alert,
  Checkbox,
  ListItemText,
} from '@mui/material';
import VisibilityIcon from '@mui/icons-material/Visibility';
import AddIcon from '@mui/icons-material/Add';
import DeleteIcon from '@mui/icons-material/Delete';
import { showToast } from '@/lib/toast';
import {
  PageContainer,
  HeaderRow,
  PageTitle,
  TablePaper,
  TableHeaderCell,
  TableBodyCell,
} from '@/components/StyledComponents';

type ForwardRow = {
  unitId: number | '';
  empRows: { id: number; note: string }[];
};


interface DivisionRequest {
  RequestID:      number;
  Title:          string;
  RequestDate:    string;
  Status:         string;
  divisionName:   string;
  departmentName: string;
  sectionName:    string;
  deviceType:     string;
  deviceNo:       number;
  deviceDesc?:    string;
}

interface RequestDetail extends DivisionRequest {
  Description:  string;
  deviceId:      number;
  sectionId:     number;
}

interface HistoryItem {
  ActionType:  string;
  ActionNote?: string;
  ActionBy:    string;
  ActionDate:  string;
}

interface DeviceRequest {
  RequestID:   number;
  Title:       string;
  Status:      string;
  RequestDate: string;
}

interface Unit {
  id: number;
  sectionId: number;
  name: string;
}

interface Employee {
  SectionEmployeeID: number;
  FullName:          string;
}


interface ForwardItem {
  divisionID: number;
  division:   string;
  employees: {
    id:   number;
    name: string;   // ← نحتاج هذا الحقل
    note: string;
  }[];
}
export default function DivisionDashboard() {
  // قائمة الطلبات
  const [requests, setRequests] = useState<DivisionRequest[]>([]);
  const [loading,  setLoading]  = useState(true);
  const [snackbar, setSnackbar] = useState<{ message: string; severity: 'error'|'success' }|null>(null);

  // للديلوج التفصيلي
  const [detailOpen,       setDetailOpen]       = useState(false);
  const [selectedReqId,    setSelectedReqId]    = useState<number|null>(null);
  const [detailLoading,    setDetailLoading]    = useState(false);
  const [detail,           setDetail]           = useState<RequestDetail|null>(null);
  const [history,          setHistory]          = useState<HistoryItem[]>([]);
  const [deviceRequests,   setDeviceRequests]   = useState<DeviceRequest[]>([]);

  // بيانات التحويل
  const [units,            setUnits]            = useState<Unit[]>([]);
  const [unitEmployeesMap, setUnitEmployeesMap] = useState<Record<number,Employee[]>>({});
  const [forwardList, setForwardList] = useState<ForwardRow[]>([]);

  const [forwarding,       setForwarding]       = useState(false);
  const [forwardOpen, setForwardOpen]     = useState(false);
  // — للتعليقات داخل الحوار
  const [comment, setComment]               = useState('');
  const [sendingComment, setSendingComment] = useState(false);
  const [currentUser, setCurrentUser] = useState<string>('');

  const [detailTab, setDetailTab] = useState('0');

useEffect(() => {
    fetch('/api/auth/me', { credentials: 'include' })
      .then(r => r.ok ? r.json() : Promise.reject())
      .then(data => setCurrentUser(data.name || data.FullName))
      .catch(() => {/* ignore */});
  }, []);
  // 1) جلب قائمة الطلبات
  useEffect(() => {
    (async () => {
      try {
        const res = await fetch('/api/division/requests', { credentials:'include' });
        if (!res.ok) throw new Error();
        setRequests(await res.json());
      } catch {
        setSnackbar({ message:'فشل في جلب طلبات الشعبة', severity:'error' });
      } finally {
        setLoading(false);
      }
    })();
  }, []);

  // 2) فتح Details Dialog
  const handleView = async (id:number) => {
    setSelectedReqId(id);
    setDetailOpen(true);
    setDetailLoading(true);
    try {
      const [reqRes, histRes, sameRes] = await Promise.all([
        fetch(`/api/division/requests/${id}`, {credentials:'include'}),
        fetch(`/api/admin/requests/${id}/history`, {credentials:'include'}),
        fetch(`/api/division/requests?deviceId=${id}`, {credentials:'include'}),
      ]);
      if (reqRes.ok) setDetail(await reqRes.json());
      if (histRes.ok) setHistory(await histRes.json());
      if (sameRes.ok) setDeviceRequests(await sameRes.json());
    } catch {
      showToast({type:'error', message:'فشل في تحميل التفاصيل'});
      setDetailOpen(false);
    } finally {
      setDetailLoading(false);
    }
  };

  // 3) إغلاق الديلوج التفصيلي
  const handleClose = () => {
    setDetailOpen(false);
    setSelectedReqId(null);
    setDetail(null);
    setHistory([]);
    setDeviceRequests([]);
    setUnits([]);
    setForwardList([]);
     setComment('');
  };



  // 3) فتح Forward Modal
  const openForward = async () => {
    if (!detail) return;
    setForwardList([]);
    setForwardOpen(true);
    // جلب الوحدات للشعبة
    try {
      const res = await fetch(`/api/division/units`, {credentials:'include'});
      if (res.ok) setUnits(await res.json());
    } catch {
      showToast({type:'error', message:'فشل في جلب الوحدات'});
    }
  };
    // 4) إضافة/حذف صفوف التحويل
// إضافة صف جديد
const addForwardRow = () =>
  setForwardList(fl => [...fl, { unitId: '', empRows: [] }]);

const removeForwardRow = (idx: number) =>
  setForwardList(fl => fl.filter((_, i) => i !== idx));

  // 5) عند تغيير وحدة في صف، جلب الموظفين مرة واحدة
  useEffect(() => {
    forwardList.forEach(row => {
      if (row.unitId && !unitEmployeesMap[row.unitId]) {
        fetch(`/api/division/employees?unitId=${row.unitId}`, {credentials:'include'})
          .then(r=>r.ok?r.json():[]).then((emps:Employee[])=>
            setUnitEmployeesMap(m=>({...m, [row.unitId as number]: emps}))
          ).catch(()=>{});
      }
    });
  }, [forwardList]);

  // 6) تنفيذ التحويل
  const handleForward = async () => {
if (forwardList.some(f => !f.unitId || f.empRows.length === 0)) {
  showToast({ type:'error', message:'اكمل تعبئة كل صف' });
  return;
}
    setForwarding(true);
    try {
      const payload = forwardList.map(row => ({
  divisionID: row.unitId,
  division:   units.find(u => u.id === row.unitId)!.name,
  employees:  row.empRows.map(er => ({
    id:   er.id,
    note: er.note,
  })),
}));
      const res = await fetch(`/api/division/requests/${selectedReqId}/forward`, {
        method:'POST',
        headers:{'Content-Type':'application/json'},
        credentials:'include',
        body: JSON.stringify({forwards: payload})
      });
      if (!res.ok) throw await res.json();
      showToast({type:'success', message:'تم التحويل'});
      setForwardOpen(false);
      // تحديث القائمة
      const list = await fetch('/api/division/requests',{credentials:'include'});
      if (list.ok) setRequests(await list.json());
    } catch(err:any) {
      showToast({type:'error', message: err.error||'فشل التحويل'});
    } finally {
      setForwarding(false);
    }
  };

  // 5) جلب موظفي الوحدة عند اختيار وحدة جديدة في أي صف
  useEffect(() => {
    forwardList.forEach(row => {
      if (row.unitId && !unitEmployeesMap[row.unitId]) {
        fetch(`/api/division/employees?unitId=${row.unitId}`, { credentials:'include' })
          .then(r => r.ok ? r.json() : [])
          .then((emps: Employee[]) =>
            setUnitEmployeesMap(m => ({ ...m, [row.unitId as number]: emps }))
          )
          .catch(() => {});
      }
    });
  }, [forwardList]);

 // 6) إضافة تعليق (كما سابقًا)
  const handleComment = async (e: FormEvent) => {
    e.preventDefault();
    if (!comment.trim() || !selectedReqId) {
      showToast({ type:'error', message:'اكتب تعليقاً أولاً' });
      return;
    }
    setSendingComment(true);
    try {
      const res = await fetch(`/api/division/requests/${selectedReqId}/comment`, {
        method:'POST',
        headers:{ 'Content-Type':'application/json' },
        credentials:'include',
        body: JSON.stringify({ comment })
      });
      if (!res.ok) throw await res.json();
      showToast({ type:'success', message:'تم إضافة التعليق' });
      setComment('');
      // تحديث السجل
      const histRes = await fetch(`/api/admin/requests/${selectedReqId}/history`, { credentials:'include' });
      if (histRes.ok) setHistory(await histRes.json());
    } catch (err: any) {
      showToast({ type:'error', message: err.error || 'فشل إضافة التعليق' });
    } finally {
      setSendingComment(false);
    }
  };
  return (
    <PageContainer>
      <HeaderRow>
        <PageTitle>طلبات الشعبة</PageTitle>
      </HeaderRow>

      {loading ? (
        <Typography align="center" sx={{ py:6 }}>جاري التحميل…</Typography>
      ) : requests.length===0 ? (
        <Typography align="center" color="text.secondary">
          لا توجد طلبات حالياً لهذه الشعبة.
        </Typography>
      ) : (
        <TablePaper>
          <Table>
            <TableHead>
              <TableRow>
                {[
                  'رقم الطلب',
                  'الموضوع',
                  'الهيكل الهرمي',
                  'الجهاز',
                  'تاريخ الطلب',
                  'الحالة',
                  'إجراء'
                ].map(l => (
                  <TableHeaderCell key={l} align="center">{l}</TableHeaderCell>
                ))}
              </TableRow>
            </TableHead>
            <TableBody>
              {requests.map(r => (
                <TableRow key={r.RequestID} hover>
                  <TableBodyCell align="center">{r.RequestID}</TableBodyCell>
                  <TableBodyCell align="center">{r.Title}</TableBodyCell>
                  <TableBodyCell align="center">
                    {r.divisionName} &gt; {r.departmentName} &gt; {r.sectionName}
                  </TableBodyCell>
                  <TableBodyCell align="center">
                    {r.deviceType}#{r.deviceNo}
                    {r.deviceDesc && ` (${r.deviceDesc})`}
                  </TableBodyCell>
                  <TableBodyCell align="center">
                    {new Date(r.RequestDate).toLocaleDateString()}
                  </TableBodyCell>
                  <TableBodyCell align="center">{r.Status}</TableBodyCell>
                  <TableBodyCell align="center">
                    <IconButton color="primary" onClick={()=>handleView(r.RequestID)}>
                      <VisibilityIcon />
                    </IconButton>
                  </TableBodyCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </TablePaper>
      )}

      {/* — Details & Forward Dialog — */}
      <Dialog open={detailOpen} onClose={handleClose} fullWidth maxWidth="md">
        <DialogTitle>تفاصيل الطلب #{detail?.RequestID}</DialogTitle>
         <TabContext value={detailTab}>
        <TabList onChange={(_, v) => setDetailTab(v)} variant="scrollable" scrollButtons="auto">
          <Tab label="الموضوع والوصف" value="0" />
          <Tab label="طلبات بنفس الجهاز" value="1" />
          <Tab label="سجل العمليات" value="2" />
        </TabList>
        <DialogContent dividers>
          {detailLoading || !detail ? (
            <Typography>جاري التحميل…</Typography>
          ) : (
            <>
              {/* تفاصيل الطلب */}
              <TabPanel value="0">

              <Typography gutterBottom><strong>الموضوع:</strong> {detail.Title}</Typography>
              <Typography gutterBottom><strong>الوصف:</strong> {detail.Description}</Typography>
              <Typography gutterBottom>
                <strong>تاريخ التقديم:</strong>{' '}
                {new Date(detail.RequestDate).toLocaleDateString()}
              </Typography>
              <Typography gutterBottom><strong>الحالة:</strong> {detail.Status}</Typography>
              <Typography gutterBottom>
                <strong>الهيكل الهرمي:</strong><br/>
                {detail.divisionName} &gt; {detail.departmentName} &gt; {detail.sectionName}
              </Typography>
              <Button variant="outlined" sx={{mt:2}} onClick={openForward}>
                  تحويل الطلب
                </Button>
               </TabPanel>
              {/* طلبات بنفس الجهاز */}
              {deviceRequests.length>0 && (
                <>
                <TabPanel value="1">
                  <Typography variant="h6" sx={{ mt:2 }}>طلبات بنفس الجهاز</Typography>
                  <Table size="small">
                    <TableHead>
                      <TableRow>
                        {['#','موضوع','الحالة','التاريخ','إجراء'].map(h=>(
                          <TableCell key={h} align="center"><strong>{h}</strong></TableCell>
                        ))}
                      </TableRow>
                    </TableHead>
                    <TableBody>
                      {deviceRequests.map(dr=>(
                        <TableRow key={dr.RequestID} hover>
                          <TableCell align="center">{dr.RequestID}</TableCell>
                          <TableCell align="center">{dr.Title}</TableCell>
                          <TableCell align="center">{dr.Status}</TableCell>
                          <TableCell align="center">
                            {new Date(dr.RequestDate).toLocaleDateString()}
                          </TableCell>
                          <TableCell align="center">
                            <Link href={`/division/requests/${dr.RequestID}`}>
                            <IconButton color="primary" size="small">
                              <VisibilityIcon fontSize="small" />
                            </IconButton>
                          </Link>

                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                  </TabPanel>
                </>

              )}
              
              {/* سجل العمليات */}
              <TabPanel value="2">
              <Box sx={{ my: 2 }}>
    <Typography variant="h6" gutterBottom>سجل العمليات</Typography>
    <Paper
      variant="outlined"
      sx={{
        maxHeight: 300,      // أقصى ارتفاع
        overflowY: 'auto',   // إمكانية التمرير عمودياً
        p: 2,                // Padding داخلي
      }}
    >
      {history.map((h, i) => {
        const isMine = h.ActionBy === currentUser;
        return (
          <Box
            key={i}
            sx={{
              mb: 2,
              p: 2,
              bgcolor: isMine ? 'primary.light' : 'grey.100',
              color: isMine ? 'white' : 'blac',
              borderRadius: 1,
              alignSelf: isMine ? 'flex-end' : 'flex-start',
              maxWidth: '100%',
            }}
          >
            <Typography component="div">
              <strong>{h.ActionType}</strong>
              {h.ActionNote && ` — ${h.ActionNote}`}
            </Typography>
            <Typography variant="caption" component="div">
              بواسطة {h.ActionBy} في{' '}
              {new Date(h.ActionDate).toLocaleString()}
            </Typography>
          </Box>
        );
      })}
    </Paper>
  </Box>
                        {/* إضافة تعليق */}
              <Typography variant="h6" sx={{ mt: 2 }}>إضافة تعليق</Typography>
<form onSubmit={handleComment}>
                <TextField
                  fullWidth
                  
                  minRows={3}
                  value={comment}
                  onChange={e => setComment(e.target.value)}
                  placeholder="اكتب تعليقك هنا..."
                  sx={{ mb: 2 }}
                />
<Button
  type="submit"
  fullWidth
  variant="contained"
  disabled={sendingComment}
>
  {sendingComment ? 'جاري الإرسال…' : 'إرسال التعليق'}
                </Button>
 </form>
 </TabPanel>
</>
            
          )}
        </DialogContent>
        </TabContext>
        <DialogActions sx={{ justifyContent:'space-between' }}>
          <Button onClick={handleClose}>إغلاق</Button>
          
        </DialogActions>
      </Dialog>
{/* Forward Modal مستقل */}
     <Dialog open={forwardOpen} onClose={() => setForwardOpen(false)} fullWidth maxWidth="sm">
  <DialogTitle>تحويل الطلب #{selectedReqId}</DialogTitle>
  <DialogContent dividers>
    {forwardList.map((row, idx) => {
      // الموظفون التابعون للوحدة
      const emps = unitEmployeesMap[row.unitId as number] || [];
      return (
        <Box key={idx} sx={{ mb: 3 }}>
          {/* اختيار الوحدة */}
          <FormControl fullWidth sx={{ mb: 2 }}>
            <InputLabel>الوحدة</InputLabel>
            <Select
              value={row.unitId}
              label="الوحدة"
              onChange={e => {
  const copy = [...forwardList];
  copy[idx] = { unitId: +e.target.value, empRows: [] };
  setForwardList(copy);
}}
            >
              <MenuItem value=""><em>—</em></MenuItem>
              {units.map(u => (
                <MenuItem key={u.id} value={u.id}>{u.name}</MenuItem>
              ))}
            </Select>
          </FormControl>

          {/* قائمة الموظفين للـ unitId المختارة */}
    {emps.map((emp, idx2) => {
  const isChecked = forwardList[idx].empRows.some(er => er.id === emp.SectionEmployeeID);
  const note = forwardList[idx].empRows.find(er => er.id === emp.SectionEmployeeID)?.note || '';
  return (
    <Box key={emp.SectionEmployeeID} sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
      <FormControlLabel
        control={
          <Checkbox
          
            checked={isChecked}
            onChange={e => {
              const copy = [...forwardList];
              if (e.target.checked) {
                copy[idx].empRows.push({ id: emp.SectionEmployeeID, note: '' });
              } else {
                copy[idx].empRows = copy[idx].empRows.filter(
                  er => er.id !== emp.SectionEmployeeID
                );
              }
              setForwardList(copy);
            }}
          />
        }
        label={emp.FullName}
        sx={{ mr: 2 }}
      />

      {isChecked && (
        <TextField
          placeholder="ملاحظة"
          value={note}
          onChange={e => {
            const copy = [...forwardList];
            const target = copy[idx].empRows.find(
              er => er.id === emp.SectionEmployeeID
            )!;
            target.note = e.target.value;
            setForwardList(copy);
          }}
          sx={{ flex: 1,mr: 2 }}
        />
      )}
    </Box>
  );
})}


          <Button
            startIcon={<DeleteIcon />}
            color="error"
            onClick={() => removeForwardRow(idx)}
          >
            حذف الوحدة
          </Button>
        </Box>
      );
    })}

    <Button startIcon={<AddIcon />} onClick={addForwardRow} sx={{ mt: 1 }}>
      إضافة وحدة
    </Button>
  </DialogContent>

  <DialogActions sx={{ justifyContent: 'space-between' }}>
    <Button onClick={() => setForwardOpen(false)}>إلغاء</Button>
    <Button
      variant="contained"
      disabled={forwarding || forwardList.length === 0}
      onClick={async () => {
        // بناء الـ payload
        const payload = forwardList.map(row => ({
          divisionID: row.unitId,
          division: units.find(u => u.id === row.unitId)!.name,
          employees: row.empRows.map(er => {
  const emp = unitEmployeesMap[row.unitId as number].find(e => e.SectionEmployeeID === er.id)!;
  return {
    id:   er.id,
    name: emp.FullName,   // ← إضافة الاسم هنا
    note: er.note,
  };
}),
        }));
        // إرسال
        setForwarding(true);
        const res = await fetch(`/api/division/requests/${selectedReqId}/forward`, {
          method: 'POST',
          credentials: 'include',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ forwards: payload }),
        });
        setForwarding(false);
        if (res.ok) {
  showToast({ type: 'success', message: 'تم التحويل بنجاح' });
  await handleView(selectedReqId!);  // يعيد تحميل التفاصيل والسجلّ
  setForwardOpen(false);

        } else {
          const err = await res.json();
          showToast({ type: 'error', message: err.error || 'فشل في التحويل' });
        }
      }}
    >
      {forwarding ? 'جاري التحويل…' : 'تحويل'}
    </Button>
  </DialogActions>
</Dialog>

      {/* Snackbar */}
      <Snackbar
        open={!!snackbar}
        autoHideDuration={3000}
        onClose={() => setSnackbar(null)}
        anchorOrigin={{ vertical:'top', horizontal:'center' }}
      >
        <Alert
          severity={snackbar?.severity}
          onClose={() => setSnackbar(null)}
          sx={{ width:'100%' }}
        >
          {snackbar?.message}
        </Alert>
      </Snackbar>
    </PageContainer>
  );
}








          {user.division   && <Typography variant="body2"><strong>التشكيل:</strong> {user.division.name}</Typography>}
